/**
 * üê• ÎÇ¥Í∞Ä Ïß† stack Íµ¨ÌòÑÏΩîÎìú 
 */
{
  interface Stack {
    readonly size: number;
    push(value: string): void;
    pop(): string;
  }

  //‚ùóÔ∏èÎç∞Ïù¥ÌÑ∞Î•º Îã¥Í∏∞Îßå ÌïòÎäî Í≤ÉÏùÄ classÍ∞Ä ÏïÑÎãå typeÏùÑ ÌÜµÌï¥ Ï†ïÏùòÌï† Ïàò ÏûàÎã§. 
  class Node {
    constructor(public value:string, public prevNode:Node|null) {
      this.value = value;
      this.prevNode = prevNode;
    }
  }

  //ÏóòÎ¶¨Îäî Í∑∏ÎÉ• head Î≥ÄÏàòÏóêÎã§Í∞Ä Îã¥ÏïòÎäîÎç∞... Í∑∏Îü¨ÎÑ§. ÎßåÎì§ÌïÑÏöîÍ∞Ä ÏóÜÏóàÍµ¨ÎÇò. ÌïòÎäî Ïó≠Ìï†Ïù¥ ÏóÜÏñ¥
  class Head {
    private _finalNode:Node | null = null;
    
    set finalNode(node: Node|null){
      this._finalNode = node;
    }

    get finalNode():Node|null {
      return this._finalNode;
    }
  }

  class ArrayStack implements Stack {
    //Ïù∏ÌÑ∞ÌéòÏù¥Ïä§ÏóêÏÑú readonlyÎ°ú ÏÑ†Ïñ∏ÌïúÍ≤ÉÏùÄ Ïô∏Î∂ÄÏóêÏÑú Î≥ÄÍ≤ΩÌï†Ïàò ÏóÜÎäî ÌïÑÎìúÎùºÎäî Í±∏ ÏïåÎ†§Ï£ºÍ∏∞ ÏúÑÌï¥ÏÑú
    //‚ùóÔ∏èprivateÏúºÎ°ú Ï§òÏÑú Ïô∏Î∂ÄÏóêÏÑú getÏúºÎ°úÎßå Ï†ëÍ∑ºÌï† Ïàò ÏûàÎèÑÎ°ù ÌïòÍ∏∞
    size: number = 0; //=> Ellie : private _size: number;
    private head:Head = new Head();

    push(value: string) {
      const node = new Node(value, this.head.finalNode)
      this.head.finalNode = node;
      this.size++;
    }

    pop(): string {
      if(!this.head.finalNode) {
        throw new Error('Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏñ¥Ïöî');
      }
      const currentNode = this.head.finalNode;
      this.head.finalNode = currentNode.prevNode;
      this.size--;
      return currentNode.value;
    }

    getSize():number {
      return this.size;
    }
  }

  const arrayStack = new ArrayStack();
  arrayStack.push("ellie");
  arrayStack.push("bob");
  console.log(arrayStack.pop());
  console.log(arrayStack.pop());
}

